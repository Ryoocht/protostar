generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             String  @id @default(uuid())
  appId          Int     @unique @map("app_id")
  email          String  @unique
  firstName      String  @map("first_name")
  lastName       String  @map("last_name")
  phoneNumber    String? @map("phone_number")
  country        String?
  firstLanguage  String? @map("first_language")
  secondLanguage String? @map("second_language")
  password       String
  avatar         String?

  tutor    Tutor?
  student  Student?
  blogs    Blog[]
  Comment  Comment[]
  BlogLike BlogLike[]

  @@map("user")
}

model EmailVerification {
  email      String   @id @db.VarChar(36)
  code       String   @db.VarChar(6)
  expiresAt  DateTime @map("expires_at")
  isVerified Boolean  @default(false) @map("is_verified")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @map("updated_at")

  @@unique(email)
  @@map("email_verification")
}

model Tutor {
  id      String    @id @default(uuid())
  userId  String    @unique @map("user_id")
  user    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  Profile Profile[]

  @@map("tutor")
}

model Student {
  id      String    @id @default(uuid())
  userId  String    @unique @map("user_id")
  user    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  Profile Profile[]

  @@map("student")
}

model Profile {
  id                   String                 @id @default(uuid())
  bio                  String                 @db.VarChar(500)
  interestedCategories CategoriesInProfiles[]
  experienceSkills     SkillSet[]             @relation("ExperienceSkills")
  desiredSkills        SkillSet[]             @relation("DesiredSkills")

  tutorId   String?  @map("tutor_id")
  tutor     Tutor?   @relation(fields: [tutorId], references: [id], onDelete: Cascade)
  studentId String?  @map("student_id")
  student   Student? @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@map("profile")
}

model Category {
  id                   String                 @id @default(uuid())
  name                 String
  categoriesInProfiles CategoriesInProfiles[]

  @@map("category")
}

model SkillSet {
  id                String    @id @default(uuid())
  title             String
  experiencedPeriod String?   @map("experience_period")
  experienceSkills  Profile[] @relation("ExperienceSkills")
  desiredSkills     Profile[] @relation("DesiredSkills")

  @@map("skil_set")
}

model CategoriesInProfiles {
  profileId  String   @map("profile_id")
  profile    Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  categoryId String   @map("category_id")
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([profileId, categoryId])
  @@map("categories_in_profiles")
}

model Blog {
  id        String   @id @default(uuid())
  authorId  String   @unique @map("author_id")
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  title     String
  content   String   @db.VarChar(500)
  published Boolean  @default(true)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  comments  Comment[]
  blogLikes BlogLike[]
  blogTags  TagsOnBlogs[]

  @@map("blog")
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  parentCommentId String? @map("parent_comment_id")
  userId          String  @map("user_id")
  user            User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  blogId          String  @map("blog_id")
  blog            Blog    @relation(fields: [blogId], references: [id], onDelete: Cascade)

  parentComment Comment?  @relation("BlogComment", fields: [parentCommentId], references: [id])
  childComment  Comment[] @relation("BlogComment")

  @@map("comment")
}

model BlogLike {
  id     String @id @default(uuid())
  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  blogId String @map("blog_id")
  blog   Blog   @relation(fields: [blogId], references: [id], onDelete: Cascade)

  @@map("blog_like")
}

model Tag {
  id          String        @id @default(uuid())
  title       String        @unique @db.VarChar(50)
  tagsOnBlogs TagsOnBlogs[]

  @@map("tag")
}

model TagsOnBlogs {
  id String @id @default(uuid())

  blogId String @map("blog_id")
  blog   Blog   @relation(fields: [blogId], references: [id], onDelete: Cascade)
  tagId  String @map("tag_id")
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@map("tags_on_blogs")
}

// Old schema
// model Student {
//   id        String @id @default(uuid()) @map("id")
//   firstName String
//   lastName  String
//   email     String @unique @map("email")
//   avatar    String
//   password  String

//   profile       Profile?
//   Address       Address?
//   addressId     String
//   bookedLessons StudentsInLessons[]

//   @@map("students")
// }

// model Tutor {
//   id                String              @id @default(uuid()) @map("id")
//   firstName         String
//   lastName          String
//   email             String              @unique @map("email")
//   avatar            String
//   password          String
//   profile           Profile?
//   address           Address?
//   tutorAvailability TutorAvailability[]
//   lessons           Lesson[]

//   @@map("tutors")
// }

// model Profile {
//   id              String @id @default(uuid()) @map("id")
//   bio             String
//   subject         String
//   experience      String
//   primaryLanguage String

//   studentId String?  @unique
//   student   Student? @relation(fields: [studentId], references: [id], onDelete: Cascade)
//   tutorId   String?  @unique
//   tutor     Tutor?   @relation(fields: [tutorId], references: [id], onDelete: Cascade)

//   StudentLearningLanguages StudentLearningLanguages[]
//   StudentAquiredLanguages  StudentAquiredLanguages[]
//   TutorLanguages           TutorLanguages[]

//   @@map("profiles")
// }

// model Language {
//   id                       String                     @id @default(uuid()) @map("id")
//   title                    String                     @unique
//   icon                     String?
//   StudentLearningLanguages StudentLearningLanguages[]
//   StudentAquiredLanguages  StudentAquiredLanguages[]
//   TutorLanguages           TutorLanguages[]
// }

// model StudentLearningLanguages {
//   id         String   @id @default(uuid()) @map("id")
//   profileId  String   @unique
//   profile    Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
//   languageId String   @unique
//   language   Language @relation(fields: [languageId], references: [id], onDelete: Cascade)

//   @@unique([profileId, languageId])
// }

// model StudentAquiredLanguages {
//   id         String   @id @default(uuid()) @map("id")
//   profileId  String   @unique
//   profile    Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
//   languageId String   @unique
//   language   Language @relation(fields: [languageId], references: [id], onDelete: Cascade)

//   @@unique([profileId, languageId])
// }

// model TutorLanguages {
//   id         String   @id @default(uuid()) @map("id")
//   profileId  String   @unique
//   profile    Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
//   languageId String   @unique
//   language   Language @relation(fields: [languageId], references: [id], onDelete: Cascade)

//   @@unique([profileId, languageId])
// }

// model Address {
//   id           String  @id @default(uuid()) @map("id")
//   fullAddress  String? @map("full_address")
//   streetNumber String? @map("street_number")
//   streetName   String? @map("street_name")
//   suburb       String? @map("suburb")
//   state        String? @map("state")
//   city         String? @map("city")
//   country      String  @map("country")
//   postcode     String? @map("postcode") @db.VarChar(10)
//   lng          Float?  @map("lng")
//   lat          Float?  @map("lat")

//   studentId String  @unique
//   student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
//   tutorId   String  @unique
//   Tutor     Tutor   @relation(fields: [tutorId], references: [id], onDelete: Cascade)

//   @@map("addresses")
// }

// model Lesson {
//   id        String     @id @default(uuid()) @map("id")
//   type      LessonType
//   dayOfWeek Int
//   startTime DateTime
//   endTime   DateTime
//   capacity  Int
//   price     Int

//   tutuorId       String              @unique
//   tutor          Tutor               @relation(fields: [tutuorId], references: [id], onDelete: Cascade)
//   bookedStudents StudentsInLessons[]

//   @@map("lessons")
// }

// model StudentsInLessons {
//   id        String  @id @default(uuid()) @map("id")
//   studentId String  @unique
//   student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
//   lessonId  String  @unique
//   lesson    Lesson  @relation(fields: [lessonId], references: [id], onDelete: Cascade)

//   @@map("students_lessons")
// }

// model TutorAvailability {
//   id        String   @id @default(uuid()) @map("id")
//   dayOfWeek Int
//   startTime DateTime
//   endTime   DateTime

//   tutorId String @unique
//   tutor   Tutor  @relation(fields: [tutorId], references: [id], onDelete: Cascade)

//   @@map("tutor_availabilities")
// }

// enum LessonType {
//   CLASS
//   ONE_ON_ONE
// }
